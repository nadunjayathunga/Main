from datetime import datetime
import pandas as pd
import math
from dateutil.relativedelta import relativedelta
from od_interest import END_DATE, START_DATE
from od_interest import df_collection, df_data, df_gl, df_coa, exclusion
from od_interest import job_interest

"""
This programme requires following sheets of Data-NBNL
1. dCustomers
2. dJobs
3. fGL
4. dCoAAdler
5. fData
6. fCollection
7. fNotInvoiced

Report Period is accourding to the START_DATE and END_DATE mentioned in od_interest()
"""

PATH = r'C:\Masters\Data-NBNL.xlsx'
df_customers = pd.read_excel(io=PATH, sheet_name='dCustomers', usecols=['Customer_Code', 'Cus_Name'])
df_jobs = pd.read_excel(io=PATH, sheet_name='dJobs', usecols=['Job_Number', 'Customer_Code','emp_id'])
df_jobs['Job_Code'] = df_jobs['Job_Number'].str.split('-', expand=True)[0].str.strip()

ruwais_jobs: list = df_jobs.loc[df_jobs['Customer_Code'].isin(exclusion['ruwais']['customers']), 'Job_Code'].to_list()
qafco_jobs: list = df_jobs.loc[df_jobs['Customer_Code'].isin(exclusion['qafco']['customers']), 'Job_Code'].to_list()
# exclusions includes customers and staff relates to Al Ruwais Port Operations.

def expenses_allocation(job_id: str) -> float:
    """calculate gross profit (excluding direct salaries) generated by all four types of revenue streams for a given job

    Args:
        job_id (str): a job number of an invoice which is partially or fully outstanding on a given date. 

    Returns:
        float: gross profit without salaries for a given job
    """
    # revenue ledgers and direct logistics expenses ledgers including "Logistics - Others"
    filt = (df_data['Job_Code'] == job_id) & (df_data['Ledger_Code'].isin(
        [5010202001, 5010202002, 5010202003, 5010202004, 4010201001, 4010201002, 4010201003, 4010201004]))
    profit_wo_salary: float = df_data.loc[filt, 'Credit'].sum(
    ) - df_data.loc[filt, 'Debit'].sum()
    return profit_wo_salary


def job_revenue(row) -> float:
    """ "Net" revenue to which each job has made 

    Args:
        row (_type_): each row of the report

    Returns:
        float: Net revenue of each job
    """
    job_id: str = row['Job_Code']
    filt = (df_data['Job_Code'] == job_id) & (df_data['Ledger_Code'].isin(
        [4010201001, 4010201002, 4010201003, 4010201004])) & (df_data['Voucher_Date'] >=START_DATE) & (df_data['Voucher_Date'] <=END_DATE)
    revenue_job: float = df_data.loc[filt, 'Credit'].sum() - df_data.loc[filt, 'Debit'].sum()
    return revenue_job


def invoices_raised(job_id: str) -> list:
    """Certain jobs contains more than one invoices raised in same or different periods. 

    Args:
        job_id (str): a given job number

    Returns:
        list: list of invoices raised for a given job. 
    """
    filt = (df_data['Job_Code'] == job_id) & (df_data['Type'] == 'SI')
    # take unique list of invoices raised for a given job
    invoices: list = list(set(df_data.loc[filt, 'Voucher Number'].tolist()))
    return invoices


def total_revenue(inv_date: datetime, job_id: str) -> tuple:
    """Total revenue made by each of three streams for each time frequency (i.e. month)

    Args:
        inv_date (datetime): invoice date for a given invoice

    Returns:
        tuple: sum of Net revenue for each of three revenue streams. 
    """
    # calculate the start date of the month / end date of the month for a given invoice date
    start_date: datetime = inv_date + relativedelta(day=1)
    end_date: datetime = inv_date + relativedelta(day=31)
    if job_id in ruwais_jobs:
        clearance_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201001) & (
                                 df_data['Job_Code'].isin(ruwais_jobs))
        transport_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201002) & (
                                 df_data['Job_Code'].isin(ruwais_jobs))
        freight_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201003) & (
                               df_data['Job_Code'].isin(ruwais_jobs))
    elif job_id in qafco_jobs:
        clearance_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201001) & (
                                 ~df_data['Job_Code'].isin(ruwais_jobs))
        transport_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201002) & (
                                 ~df_data['Job_Code'].isin(ruwais_jobs))
        freight_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201003) & (
                               df_data['Job_Code'].isin(qafco_jobs))
    else:
        clearance_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201001) & (
                                 ~df_data['Job_Code'].isin(ruwais_jobs))
        transport_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201002) & (
                                 ~df_data['Job_Code'].isin(ruwais_jobs))
        freight_rev_filt = (df_data['Voucher_Date'] >= start_date) & (
                df_data['Voucher_Date'] <= end_date) & (df_data['Ledger_Code'] == 4010201003) & (
                               ~df_data['Job_Code'].isin(ruwais_jobs))
    clearance_rev: float = df_data.loc[clearance_rev_filt, 'Credit'].sum()
    transport_rev: float = df_data.loc[transport_rev_filt, 'Credit'].sum()
    freight_rev: float = df_data.loc[freight_rev_filt, 'Credit'].sum()
    return (clearance_rev, transport_rev, freight_rev)


def salary_expense(inv_date: datetime, job_id: str) -> tuple:
    """Total direct salary cost incurred by each of three streams for each time frequency (i.e. month)

    Args:
        inv_date (datetime): invoice date for a given invoice

    Returns:
        tuple: sum of direct salary cost for each of three revenue streams. 
    """
    start_date: datetime = inv_date + relativedelta(day=1)
    end_date: datetime = inv_date + relativedelta(day=31)
    if job_id in ruwais_jobs:
        clearance_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201001, 5010201004])) & (
                                    df_gl['Cost Center'].isin(exclusion['ruwais']['staff']))
        transport_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201002, 5010201005])) & (
                                    df_gl['Cost Center'].isin(exclusion['ruwais']['staff']))
        freight_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201003, 5010201006])) & (
                                  df_gl['Cost Center'].isin(exclusion['ruwais']['staff']))
    elif job_id in qafco_jobs:
        clearance_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201001, 5010201004])) & (
                                    ~df_gl['Cost Center'].isin(exclusion['ruwais']['staff']))
        transport_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201002, 5010201005])) & (
                                    ~df_gl['Cost Center'].isin(exclusion['ruwais']['staff']))
        freight_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201003, 5010201006])) & (
                                  df_gl['Cost Center'].isin(exclusion['qafco']['staff'])) # fright
    else:
        clearance_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201001, 5010201004])) & (
                                    ~df_gl['Cost Center'].isin(exclusion['ruwais']['staff']))
        transport_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201002, 5010201005])) & (
                                    ~df_gl['Cost Center'].isin(exclusion['ruwais']['staff']))
        freight_salary_filt = (df_gl['Voucher Date'] >= start_date) & (
                df_gl['Voucher Date'] <= end_date) & (df_gl['Ledger Code'].isin([5010201003, 5010201006])) & (
                                  ~df_gl['Cost Center'].isin(exclusion['ruwais']['staff'])) & (
                                  ~df_gl['Cost Center'].isin(exclusion['qafco']['staff']))

    clearance_salary: float = df_gl.loc[clearance_salary_filt, 'Amount'].sum()
    transport_salary: float = df_gl.loc[transport_salary_filt, 'Amount'].sum()
    freight_salary: float = df_gl.loc[freight_salary_filt, 'Amount'].sum()
    return (clearance_salary, transport_salary, freight_salary)


def salary_allocation(job_id: str) -> float:
    """Return proportionately allocated direct clearance, freight and transport direct salary cost calculated
    based on value of each revenue element of singular invoice, value of each revenue 
    elements for a given period (i.e. Month) and value of direct salary cost for a given period (i.e. month)


    Args:
        job_id (str): a given job id

    Returns:
        float: sum total of salary cost relates to all the invoices raised for a given job
    """
    # list down all the invoices raised for a given job
    invoices: list = invoices_raised(job_id=job_id)
    total_salary_allocated: float = 0
    for invoice in invoices:
        invoice_date: datetime = df_data.loc[(
                df_data['Voucher Number'] == invoice), 'Voucher_Date'].iloc[0]
        clearance_rev_filt = (df_data['Voucher Number'] == invoice) & (
                df_data['Ledger_Code'] == 4010201001)
        transport_rev_filt = (df_data['Voucher Number'] == invoice) & (
                df_data['Ledger_Code'] == 4010201002)
        freight_rev_filt = (df_data['Voucher Number'] == invoice) & (
                df_data['Ledger_Code'] == 4010201003)
        # sum total of each revenue stream for a given single invoice
        clearance_rev: float = df_data.loc[clearance_rev_filt, 'Credit'].sum()
        transport_rev: float = df_data.loc[transport_rev_filt, 'Credit'].sum()
        freight_rev: float = df_data.loc[freight_rev_filt, 'Credit'].sum()
        # sum total of revenue generated by each revenue stream for a given period (i.e. month)
        total_clearance_rev, total_transport_rev, total_freight_rev = total_revenue(
            inv_date=invoice_date, job_id=job_id)
        clearance_salary, transport_salary, freight_salary = salary_expense(
            inv_date=invoice_date, job_id=job_id)
        try:
            allocated_clearance: float = clearance_rev / \
                                         total_clearance_rev * clearance_salary
            if math.isnan(allocated_clearance):
                allocated_clearance = 0
        except ZeroDivisionError:
            allocated_clearance = 0

        try:
            allocated_transport: float = transport_rev / \
                                         total_transport_rev * transport_salary
            if math.isnan(allocated_transport):
                allocated_transport = 0
        except ZeroDivisionError:
            allocated_transport = 0

        try:
            allocated_freight: float = freight_rev / total_freight_rev * freight_salary
            if math.isnan(allocated_freight):
                allocated_freight = 0
        except ZeroDivisionError:
            allocated_freight = 0
        allocated_total: float = allocated_clearance + allocated_transport + allocated_freight
        # as there are certain jobs which contain multiple jobs
        total_salary_allocated += allocated_total
    return total_salary_allocated


def initial_profit(row) -> float:
    """Returns the initial profit made by a job this includes salary cost, but does not include OD interest

    Args:
        row (_type_): a row of the dataframe

    Returns:
        float: a profit made by a given job
    """
    job_id: str = row['Job_Code']
    profit_wo_salary: float = expenses_allocation(job_id=job_id)
    salary_cost: float = salary_allocation(job_id=job_id)
    job_profit: float = profit_wo_salary - salary_cost
    return job_profit


def profitability_outstanding(df_collection: pd.DataFrame) -> pd.DataFrame:
    # report format is as follows
    # Customer Name|Initial Profit|Current Profit|Variance
    # NBL/IVL213009, NBL/PIV0002
    # df_collection index itself is its invoice number.
    filt = (df_collection.index.str.contains('NBL/IVL|NBL/PIV', na=False))
    df_collection: pd.DataFrame = df_collection.loc[filt]
    df_collection.rename(columns={'Invoice Amount': 'Balance Amount'}, inplace=True)
    # if Payment Voucher Number column does not have a date/dates mean, that invoice has not yet been settled.
    fully_outstanding: pd.DataFrame = df_collection.loc[df_collection['Payment Voucher Number'].isnull(), [
        'Balance Amount']]
    partially_or_fully_settled: pd.DataFrame = df_collection.loc[~df_collection['Payment Voucher Number'].isnull(
    )]
    invoice_number: list = partially_or_fully_settled.index.tolist()
    settled_amount: list = []
    for invoice in partially_or_fully_settled.index:
        voucher_date: list = []
        if isinstance(partially_or_fully_settled.loc[invoice, 'Payment Date'], datetime):
            # append to voucher_date as True or False if the Payment Date is less than or equal to end data
            # to handle instance like 2/8/2021
            voucher_date.append(
                partially_or_fully_settled.loc[invoice, 'Payment Date'] <= END_DATE)
        else:
            # 02-Nov-2020,08-Feb-2021
            voucher_date = [
                datetime.strptime(date, '%d-%b-%Y') <= END_DATE for date in
                partially_or_fully_settled.loc[invoice, 'Payment Date'].split(sep=',')]
        # NBL/CN200002-1159.00;NBL/RV210534-672.00 -> ['NBL/CN200002-1159.00','NBL/RV210534-672.00']
        receipts: list = partially_or_fully_settled.loc[invoice, 'Payment Voucher Number'].split(
            sep=';')
        voucher_amount: list = [float(voucher.split(sep='-')[1])
                                for voucher in receipts]  # [1159.00,672.00]
        # amount collected until a given date.
        collected: float = sum(voucher_amount[i] for i in range(
            len(voucher_amount)) if voucher_date[i])
        balance: float = partially_or_fully_settled.loc[invoice, 'Balance Amount'] - collected
        settled_amount.append(balance)

    partially_outstanding: pd.DataFrame = pd.DataFrame(
        data={'Invoice Number': invoice_number, 'Balance Amount': settled_amount})
    partially_outstanding.set_index(keys='Invoice Number', inplace=True)
    outstanding_final: pd.DataFrame = pd.concat(
        [fully_outstanding, partially_outstanding])
    outstanding_final.rename(
        columns={'Invoice Number': 'Voucher Number'}, inplace=True)
    outstanding_final = pd.merge(left=outstanding_final, right=df_data[[
        'Voucher Number', 'Job_Code']], how='left', left_index=True, right_on='Voucher Number')
    outstanding_final.drop_duplicates(
        subset=['Voucher Number'], keep='first', inplace=True)
    outstanding_final = outstanding_final.loc[outstanding_final['Balance Amount'] != 0]
    outstanding_final.drop(columns='Voucher Number', inplace=True)
    outstanding_final = outstanding_final.groupby(
        by='Job_Code', as_index=False, ).sum()
    outstanding_final['Revenue'] = outstanding_final.apply(
        job_revenue, axis=1)
    outstanding_final['Initial Profit'] = outstanding_final.apply(
        initial_profit, axis=1)
    outstanding_final['OD Interest'] = outstanding_final.apply(
        job_interest, axis=1)
    outstanding_final = pd.merge(left=outstanding_final, right=df_jobs[['Job_Code', 'Customer_Code']], on='Job_Code',
                                 how='left')
    outstanding_final = pd.merge(left=outstanding_final, right=df_customers, on='Customer_Code', how='left')
    outstanding_final.drop(columns=['Job_Code', 'Customer_Code'], inplace=True)
    outstanding_final = outstanding_final.groupby(by='Cus_Name').sum()
    return outstanding_final
    # outstanding_final.to_csv('outstanding.csv')


def gross_revenue(row) -> float:
    """Returns gross revenue reported for a given job

    Args:
        row (_type_): a given row

    Returns:
        float: gross revenue
    """
    job_id: str = row['Job_Code']
    # Amount net of amount debited or credited for a given customer is considered as gross revenue. 
    customers: list = df_coa.loc[df_coa['Second Level Group Name'].isin(
        ['Trade Receivables', 'Due from Related Parties', 'Deleted']), 'Ledger_Code'].to_list()
    filt = (df_data['Ledger_Code'].isin(customers)) & (df_data['Job_Code'] == job_id)
    revenue: float = df_data.loc[filt, 'Debit'].sum() - df_data.loc[filt, 'Credit'].sum()
    return revenue


def profitability_overall(emp_ids:list=df_jobs['emp_id'].unique()) -> pd.DataFrame:
    """ A dataframe consist of Customer Name|Gross Revenue|Net Revenue|Initial Profit|Interest|Revised Profit
    Grouped by customer

    Returns:
        pd.DataFrame: _description_
    """
    jobs:list = [i.split('-')[0] for i in df_jobs.loc[df_jobs['emp_id'].isin(emp_ids),'Job_Number'].tolist()]
    # list of all the jobs transacted from the start of the company
    jobs_list_filt = (df_data['Voucher_Date'] >= START_DATE) & (df_data['Voucher_Date'] <= END_DATE) & (df_data['Type'] == 'SI') & (df_data['Job_Code'].isin(jobs))
    jobs_list: list = df_data.loc[jobs_list_filt,'Job_Code'].unique()
    overall_report: pd.DataFrame = pd.DataFrame(data={'Job_Code': jobs_list})
    overall_report['Interest'], overall_report['Investment'] = zip(*overall_report.apply(job_interest, axis=1))
    #Investment consist of supplier invoices recorded until a given date
    overall_report['Gross Revenue'] = overall_report.apply(gross_revenue, axis=1)
    overall_report['Net Revenue'] = overall_report.apply(job_revenue, axis=1)
    overall_report['Initial Profit'] = overall_report.apply(initial_profit, axis=1)
    overall_report['Current Profit'] = overall_report['Initial Profit'] - overall_report['Interest']
    overall_report = pd.merge(left=overall_report, right=df_jobs[['Job_Code', 'Customer_Code']], on='Job_Code',
                            how='left')
    overall_report = pd.merge(left=overall_report, right=df_customers, on='Customer_Code', how='left')
    overall_report.drop(columns=['Job_Code', 'Customer_Code'], inplace=True)
    # grouping the report by the customer name, will turn Cus_Name as the index
    overall_report = overall_report.groupby(by='Cus_Name').sum()
    overall_report.to_csv(f'overall-{str(emp_ids[0])}.csv')
    return overall_report

employees:list = ['NBNL0088','NBNL0085','NBNL0043','NBNL0094','NBNL0087','NBNL0109','NBNL0000','NBNL0071']

for employee in employees:
    profitability_overall(emp_ids=[employee])
# profitability_overall()


